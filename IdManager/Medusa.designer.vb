'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Medusa_dev")>  _
Partial Public Class MedusaDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertIdentifierLookup(instance As IdentifierLookup)
    End Sub
  Partial Private Sub UpdateIdentifierLookup(instance As IdentifierLookup)
    End Sub
  Partial Private Sub DeleteIdentifierLookup(instance As IdentifierLookup)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Uiuc.Library.IdManagement.My.MySettings.Default.Medusa_devConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property IdentifierLookups() As System.Data.Linq.Table(Of IdentifierLookup)
		Get
			Return Me.GetTable(Of IdentifierLookup)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IdentifierLookups")>  _
Partial Public Class IdentifierLookup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MedusaIdentifier As String
	
	Private _HumanIdentifier As String
	
	Private _RegisteredDate As Date
	
	Private _RegisteredBy As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMedusaIdentifierChanging(value As String)
    End Sub
    Partial Private Sub OnMedusaIdentifierChanged()
    End Sub
    Partial Private Sub OnHumanIdentifierChanging(value As String)
    End Sub
    Partial Private Sub OnHumanIdentifierChanged()
    End Sub
    Partial Private Sub OnRegisteredDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRegisteredDateChanged()
    End Sub
    Partial Private Sub OnRegisteredByChanging(value As String)
    End Sub
    Partial Private Sub OnRegisteredByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MedusaIdentifier", DbType:="VarChar(52) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MedusaIdentifier() As String
		Get
			Return Me._MedusaIdentifier
		End Get
		Set
			If (String.Equals(Me._MedusaIdentifier, value) = false) Then
				Me.OnMedusaIdentifierChanging(value)
				Me.SendPropertyChanging
				Me._MedusaIdentifier = value
				Me.SendPropertyChanged("MedusaIdentifier")
				Me.OnMedusaIdentifierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HumanIdentifier", DbType:="VarChar(260) NOT NULL", CanBeNull:=false)>  _
	Public Property HumanIdentifier() As String
		Get
			Return Me._HumanIdentifier
		End Get
		Set
			If (String.Equals(Me._HumanIdentifier, value) = false) Then
				Me.OnHumanIdentifierChanging(value)
				Me.SendPropertyChanging
				Me._HumanIdentifier = value
				Me.SendPropertyChanged("HumanIdentifier")
				Me.OnHumanIdentifierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisteredDate", DbType:="DateTime NOT NULL")>  _
	Public Property RegisteredDate() As Date
		Get
			Return Me._RegisteredDate
		End Get
		Set
			If ((Me._RegisteredDate = value)  _
						= false) Then
				Me.OnRegisteredDateChanging(value)
				Me.SendPropertyChanging
				Me._RegisteredDate = value
				Me.SendPropertyChanged("RegisteredDate")
				Me.OnRegisteredDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisteredBy", DbType:="VarChar(64) NOT NULL", CanBeNull:=false)>  _
	Public Property RegisteredBy() As String
		Get
			Return Me._RegisteredBy
		End Get
		Set
			If (String.Equals(Me._RegisteredBy, value) = false) Then
				Me.OnRegisteredByChanging(value)
				Me.SendPropertyChanging
				Me._RegisteredBy = value
				Me.SendPropertyChanged("RegisteredBy")
				Me.OnRegisteredByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
